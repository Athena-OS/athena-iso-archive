--- a/src/utils.rs	2024-01-17 23:29:49.215407440 +0100
+++ b/src/utils.rs	2024-01-17 23:46:20.681009209 +0100
@@ -5,7 +5,6 @@
 use crate::types::*;
 use crate::vpn::*;
 use pnet::datalink;
-use regex::Regex;
 use reqwest::Client;
 use std::fs;
 use std::net::IpAddr;
@@ -13,96 +12,6 @@
 use tokio::io::{AsyncWriteExt, BufWriter};
 use tokio::sync::mpsc;
 
-pub fn change_shell(machine_info: &mut PlayingMachine, user_info: &mut PlayingUser) {
-    let result = std::env::var("SHELL").unwrap_or_default();
-    let mut file_bak = String::new();
-    let mut file = String::new();
-    let mut prompt = String::new();
-    let mut prompt_field = "";
-
-    if result.contains("bash") {
-        file_bak = format!("{}/.bashrc.htb.bak", std::env::var("HOME").unwrap_or_default());
-        file = format!("{}/.bashrc", std::env::var("HOME").unwrap_or_default());
-        prompt = format!(
-            "PS1=\"\\e[32m\\]┌──[Target:{}🚀🌐IP:{}🔥\\e[34m\\]Attacker:{}📡IP:{}\\e[32m\\]🏅Prize:{} points]\\n└──╼[👾]\\\\[\\e[36m\\]\\$(pwd) $ \\[\\e[0m\\]\"",
-            machine_info.machine.name,
-            machine_info.ip,
-            user_info.user.name,
-            get_interface_ip("tun0").expect("Error on getting tun0 IP address"),
-            machine_info.machine.points
-        );
-        prompt_field = "PS1=.*";
-    } else if result.contains("fish") {
-        file_bak = format!("{}/.config/fish/functions/fish_prompt.fish.htb.bak", std::env::var("HOME").unwrap_or_default());
-        file = format!("{}/.config/fish/functions/fish_prompt.fish", std::env::var("HOME").unwrap_or_default());
-        prompt = format!(
-            r#"function fish_prompt
-    set_color 00ff00
-    echo -n "┌──[Target:{}🚀🌐IP:{}"
-    set_color ff00d7
-    echo -n "🔥Attacker:{}📡IP:{}"
-    set_color 00ff00
-    echo "🏅Prize:{} points]"
-    set_color 00ff00
-    echo -n "└──╼[👾]"
-    set_color 00ffff
-    echo (pwd) '$' (set_color normal)
-end"#,
-            machine_info.machine.name,
-            machine_info.ip,
-            user_info.user.name,
-            get_interface_ip("tun0").expect("Error on getting tun0 IP address"),
-            machine_info.machine.points
-        );
-    } else if result.contains("zsh") {
-        file_bak = format!("{}/.zshrc.htb.bak", std::env::var("HOME").unwrap_or_default());
-        file = format!("{}/.zshrc", std::env::var("HOME").unwrap_or_default());
-        prompt = format!(
-            "PROMPT=\"%F{{46}}┌──[Target:{}🚀🌐IP:{}🔥%F{{201}}Attacker:{}📡IP:{}%F{{46}}🏅Prize:{} points]\"$'\\n'\"└──╼[👾]%F{{44}}%~ $%f \"" ,
-            machine_info.machine.name,
-            machine_info.ip,
-            user_info.user.name,
-            get_interface_ip("tun0").expect("Error on getting tun0 IP address"),
-            machine_info.machine.points
-        );
-        prompt_field = "PROMPT=.*";
-    }
-
-    if !std::path::Path::new(&file_bak).exists() {
-        std::fs::copy(&file, &file_bak).unwrap_or_default();
-    }
-    
-    if result.contains("bash") || result.contains("zsh") {
-        let file_content = std::fs::read_to_string(&file).unwrap_or_default();
-        let regex = Regex::new(prompt_field).unwrap();
-        let new_file_content = regex.replace_all(&file_content, prompt);
-        std::fs::write(&file, new_file_content.as_ref()).unwrap_or_default();
-    } else if result.contains("fish") {
-        std::fs::write(&file, &prompt).unwrap_or_default();
-    }
-}
-
-pub fn restore_shell() {
-    let result = env::var("SHELL").unwrap_or_default();
-    let mut file_bak = String::new();
-    let mut file = String::new();
-
-    if result.contains("bash") {
-        file_bak = format!("{}/.bashrc.htb.bak", env::var("HOME").unwrap());
-        file = format!("{}/.bashrc", env::var("HOME").unwrap());
-    } else if result.contains("fish") {
-        file_bak = format!("{}/.config/fish/functions/fish_prompt.fish.htb.bak", env::var("HOME").unwrap());
-        file = format!("{}/.config/fish/functions/fish_prompt.fish", env::var("HOME").unwrap());
-    } else if result.contains("zsh") {
-        file_bak = format!("{}/.zshrc.htb.bak", env::var("HOME").unwrap());
-        file = format!("{}/.zshrc", env::var("HOME").unwrap());
-    }
-    if fs::metadata(&file).is_ok() && std::path::Path::new(&file_bak).exists() {
-        //Restore the prompt file from the backup
-        fs::copy(&file_bak, &file).expect("Failed to copy file");
-    }
-}
-
 pub fn display_target_info(machine_info: &PlayingMachine, user_info: &PlayingUser) {
     println!();
     println!("{}Our secret agent gathered some information about the target:{}", BYELLOW, RESET);
@@ -184,7 +93,7 @@
     println!("Play Hack The Box machines directly on your system.");
     println!();
     std::thread::sleep(std::time::Duration::from_secs(2)); //Showing the description for some secs before showing the help message
-    println!("{} [-h] [-a] [-f] [-k] <set|reset|delete> [-m] <machine-name> [-l] <free|retired|starting> [-p] <true|false> [-r] [-s] [-u] [-v] <vpn-name>", env::args().next().unwrap());
+    println!("{} [-h] [-a] [-f] [-k] <set|reset|delete> [-m] <machine-name> [-l] <free|retired|starting> [-r] [-s] [-u] [-v] <vpn-name>", env::args().next().unwrap());
     println!();
     println!("Options:");
     println!("-a                            Print information about the current active machine.");
@@ -193,7 +102,6 @@
     println!("-k <set|reset|delete>         Set, reset or delete the Hack The Box App Key.");
     println!("-m <machine-name>             Specify the machine name to play.");
     println!("-l <free|retired|starting>    List free, retired or starting point machines.");
-    println!("-p <true|false>               Set if the shell prompt should be changed.");
     println!("-r                            Reset the playing machine.");
     println!("-s                            Stop the playing machine.");
     println!("-u                            Update free machines in the Red Team menu.");
