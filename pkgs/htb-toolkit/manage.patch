--- a/src/manage.rs	2024-01-17 22:50:22.450368210 +0100
+++ b/src/manage.rs	2024-01-17 23:49:21.143071918 +0100
@@ -77,19 +77,14 @@
     if machine_info.ip.is_empty() { //Starting Point case because SP IP address is assigned only after spawn of the machine
         machine_info.ip = active_machine.ip;
     }
-    let mut user_info = PlayingUser::get_playinguser(&appkey).await;
 
     // SP Machines change IP address when reset, so need to ask to write /etc/hosts
     if machine_info.sp_flag {
         let _ = add_hosts(&machine_info);
     }
-
-    change_shell(&mut machine_info, &mut user_info);
 }
 
 pub async fn stop_machine() {
-    let htb_path = format!("{}/.htb.conf", env::var("HOME").unwrap());
-    let htbconfig = HTBConfig::get_current_config(&htb_path);
     let appkey = get_appkey();
     let active_machine = ActiveMachine::get_active(&appkey).await;
 
@@ -126,31 +121,9 @@
 
         // Await the result of the blocking task
         blocking_task.await.expect("Blocking task failed");
-
-        if htbconfig.promptchange { //If the prompt is set to change during the playing, when you stop the machine, it should restore the original shell
-            restore_shell();
-        }
     }
 }
 
-pub fn prompt_setting(option: &str) {
-    let home = env::var("HOME").unwrap_or_default();
-    let htb_config = format!("{}/.htb.conf", home);
-
-    let content = fs::read_to_string(&htb_config)
-        .expect("Failed to read HTB config file");
-
-    let re = Regex::new(r"prompt_change=\w+")
-        .expect("Failed to create regular expression");
-
-    let new_content = re.replace(&content, format!("prompt_change={}", option));
-
-    fs::write(&htb_config, new_content.to_string())
-        .expect("Failed to write updated content to HTB config file");
-
-    println!("Prompt setting updated to: {}", option);
-}
-
 pub async fn update_machines() -> io::Result<()> {
 
     println!("Retrieving updated data from Hack The Box... Gimme some time hackerzzz...");
